
model MPH is int64;
model Fahrenheit is int64;

@invariant("/\(0.0f <= $value, $value <= 100.0f")
model Percent is float64;

enum WindCategory {
    calm,
    windy,
    high,
    dangerous
}

enum ForecastDetail {
    sun,
    showers,
    thunderstorms,
    snow,
    fog
}

enum WindDirection {
    north,
    south,
    east,
    west
}

@invariant("0_MPH <= $min && $min <= $max && $max <= 300_MPH")
model WindInfo {
    direction: WindDirection;
    min: MPH, 
    max: MPH;
}

@invariant("-206_Fahrenheit <= $low && $low <= $high && $high <= 212_Fahrenheit")
model TemperatureInfo {
    low: Fahrenheit;
    high: Fahrenheit;
}

model Forecast {
    temp: TemperatureInfo;
    windSpeed: WindInfo;
    forecastDetail: ForecastDetail;
    @pattern("^Sun|Snow|Wind|Thunderstorms( and Sun|Snow|Wind|Thunderstorms)?$") shortForecast: String;
    forecastPercentage: Percent;
}

enum ExpertiseLevel {
    novice,
    intermediate,
    expert
}

enum GetError {
    internalError
}

enum RequestError {
    insufficientAvailability,
    closedDueToConditions,
    internalError
}

interface RentalService {
  getRentalInventory(): Nat | GetError;
  getRentalReservations(): Nat | GetError;

  @ensures("$return.is<Nat>() ==> $return.toInt() <= inventory - reservations")
  @ensures("!allowPartials && $return.is<Nat>() ==> $return == requested")
  processRentalRequest(forecast: Forecast, expertise: ExpertiseLevel, inventory: Int, reservations: Int, requested: Nat, allowPartials: Bool): Nat | RequestError;
}
